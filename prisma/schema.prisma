generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Type {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  deleted_at DateTime? @map("deleted_at")
  subType    SubType[]
}

model SubType {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  TypeId     String?    @db.ObjectId
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?  @updatedAt
  deleted_at DateTime?  @map("deleted_at")
  products   Products[]
  type       Type?      @relation(fields: [TypeId], references: [id])
}

model Products {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  productCode  String?
  image        String?
  name         String?
  detail       String?
  subTypeId    String?        @db.ObjectId
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt
  deleted_at   DateTime?      @map("deleted_at")
  price        Int?
  subType      SubType?       @relation(fields: [subTypeId], references: [id])
  orderDetail  OrderDetail[]
  qtyRate      QtyRate[]
  imageProduct ImageProduct[]
  cartItems    CartItems[]
}

model ImageProduct {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  image     String?
  products  Products? @relation(fields: [productId], references: [id])
  productId String?   @db.ObjectId
}

model QtyRate {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  qtyCheck   Int?
  productId  String?     @db.ObjectId
  products   Products?   @relation(fields: [productId], references: [id])
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
  deleted_at DateTime?   @map("deleted_at")
  addOnRate  AddOnRate[]
}

model AddOnRate {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  length     Int?
  addOn      Float?
  qtyRateId  String?   @db.ObjectId
  qtyRate    QtyRate?  @relation(fields: [qtyRateId], references: [id])
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  deleted_at DateTime? @map("deleted_at")
}

model Contact {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  address      String?
  tel          String?
  email        String?
  linkMap      String?
  facebook     String?
  linkFacebook String?
  line         String?
  linkLine     String?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  deleted_at   DateTime? @map("deleted_at")
}

model About {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  headtitle    String?
  history      String?
  subhistory   String?
  portfolio    String?
  subportfolio String?
  videotitle   String?
  video        String?
  headpolicy   String?
  subpolicy    String?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  deleted_at   DateTime? @map("deleted_at")
}

model Policy {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  headpolicy String?
  subpolicy  String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  deleted_at DateTime? @map("deleted_at")
}

model HomeTop {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String?
  subTitle   String?
  image      String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  deleted_at DateTime? @map("deleted_at")
}

model PichomeTop {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  image      String?
  name       String?
  links      String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  deleted_at DateTime? @map("deleted_at")
}

model Orders {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  orderCode   String?
  totalPrice  Float?
  image       String?
  status      String?
  deliverBy   String?
  user        User?         @relation(fields: [userId], references: [id])
  userId      String?       @db.ObjectId
  address     Address?      @relation(fields: [addressId], references: [id])
  addressId   String?       @db.ObjectId
  deliveryAt  DateTime?
  createdAt   DateTime?     @default(now())
  deleted_at  DateTime?     @map("deleted_at")
  updatedAt   DateTime?     @updatedAt
  orderDetail OrderDetail[]
}

model OrderDetail {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  sumPrice  Float?
  sumQty    Int?
  lat       Float?
  lng       Float?
  distance  Float?
  productId String?   @db.ObjectId
  orderId   String?   @db.ObjectId
  orders    Orders?   @relation(fields: [orderId], references: [id])
  products  Products? @relation(fields: [productId], references: [id])
}

model HowtoplaceOder {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  headtitle String?
  title     String?
  steps     String?
  substeps  String?
  image     String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Team {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  fname      String?
  lname      String?
  tel        String?
  email      String?
  username   String?
  password   String?
  userlevel  String?
  teamTypeId String?   @db.ObjectId
  createdAt  DateTime? @default(now())
  deleted_at DateTime? @map("deleted_at")
  updatedAt  DateTime? @updatedAt
  teamType   TeamType? @relation(fields: [teamTypeId], references: [id])
}

model TeamType {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  deleted_at DateTime? @map("deleted_at")
  Team       Team[]
}

model Cart {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?     @unique @db.ObjectId
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItems[]
}

model CartItems {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  qty       Int?
  price     Float?
  lat       Float?
  lng       Float?
  distance  Float?
  image     String?
  productId String?   @db.ObjectId
  cartId    String?   @db.ObjectId
  products  Products? @relation(fields: [productId], references: [id])
  cart      Cart?     @relation(fields: [cartId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  firstName     String?
  lastName      String?
  tel           String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?
  password      String?
  image         String?
  createdAt     DateTime? @default(now())
  deleted_at    DateTime? @map("deleted_at")
  updatedAt     DateTime? @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Orders[]
  cart          Cart[]
  address       Address[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstname   String?
  lastname    String?
  tel         String?
  address     String?
  district    String?
  subDistrict String?
  province    String?
  postalCode  String?
  userId      String?  @db.ObjectId
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Orders[]
}
